package leafAnalysis;

/*
 * This file is the CompareResults.java a GUI that will, when 'Compare' is 
 * called by the MainScree.java and will display the superimposed analysed and 
 * database edges. It will attempt to match the first superimposed edge with one
 * from the database, essentially recognising the species.
 * @author Daniel Elstob @version 1.0 23-04-2015
 */
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.Hashtable;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class CompareResults extends javax.swing.JInternalFrame {

    // <editor-fold defaultstate="collapsed" desc="Variables">  
    public Hashtable taxa = new Hashtable();
    public String[] taxaSorted = null;
    double[] percentage = null;
    double[][][] unknowns = null;
    int cnt1 = 0;
    int cnt2 = 0;
    public Vector currentEdges = null;
    double[][] currentEdge = null;
// </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Compare Results">
    // Creates new form CompareResults
    public CompareResults(String[] id, double[][][] Unknowns, Hashtable taxa) {
        super("Compare Edges",
                false, //resizable
                true, //closable
                true, //maximizable
                true);//iconifiable
        initComponents();
        this.taxa = taxa;
        unknowns = new double[Unknowns.length][2][Unknowns[0][0].length];
        for (int i = 0; i < Unknowns.length; i++) {
            for (int j = 0; j < Unknowns[0][0].length; j++) {
                System.out.println(Unknowns[i][0][j] + "\t" + Unknowns[i][1][j]);
            }
            System.arraycopy(Unknowns[i][0], 0, unknowns[i][0], 0, Unknowns[i][0].length);
            System.arraycopy(Unknowns[i][1], 0, unknowns[i][1], 0, Unknowns[i][1].length);
        }
        if (taxa == null) {
            System.out.println("Taxa hash is null");
        }
        taxaSorted = new String[id.length];
        System.arraycopy(id, 0, taxaSorted, 0, id.length);
        percentage = new double[taxaSorted.length];
        for (int i = 0; i < taxaSorted.length; i++) {
            String[] temp = taxaSorted[i].split("\t");
            taxaSorted[i] = temp[1];
            percentage[i] = Double.parseDouble(temp[0]);
        }
        //Make the list
        listSpecies.removeAllItems();
        for (int i = 0; i < taxaSorted.length; i++) {
            listSpecies.addItem(taxaSorted[i]);
        }
        listSpecies.setSelectedItem(taxaSorted[0]);
        initDisplay();
    }
    // </editor-fold>

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        edgeDisplay = new leafAnalysis.Drawer();
        btnPrev = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        lblCR = new javax.swing.JLabel();
        lblEC = new javax.swing.JLabel();
        listSpecies = new javax.swing.JComboBox();
        knownSpecies = new javax.swing.JLabel();
        btnSaveComp = new javax.swing.JButton();
        lblPercentage = new javax.swing.JLabel();
        analysedImages = new javax.swing.JLabel();
        btnUPrev = new javax.swing.JButton();
        btnUNext = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Compare Results");

        javax.swing.GroupLayout edgeDisplayLayout = new javax.swing.GroupLayout(edgeDisplay);
        edgeDisplay.setLayout(edgeDisplayLayout);
        edgeDisplayLayout.setHorizontalGroup(
            edgeDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 463, Short.MAX_VALUE)
        );
        edgeDisplayLayout.setVerticalGroup(
            edgeDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 528, Short.MAX_VALUE)
        );

        btnPrev.setText("Previous");
        btnPrev.setEnabled(false);
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });

        btnNext.setText("Next");
        btnNext.setEnabled(false);
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        lblCR.setText("Compare Results:");

        lblEC.setText("Comparison:");

        listSpecies.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        listSpecies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listSpeciesActionPerformed(evt);
            }
        });

        btnSaveComp.setText("Save");
        btnSaveComp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveCompActionPerformed(evt);
            }
        });

        lblPercentage.setText("Percentage:");

        analysedImages.setText("Analysed Images:");

        btnUPrev.setText("Previous");
        btnUPrev.setEnabled(false);
        btnUPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUPrevActionPerformed(evt);
            }
        });

        btnUNext.setText("Next");
        btnUNext.setEnabled(false);
        btnUNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUNextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(edgeDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(listSpecies, 0, 273, Short.MAX_VALUE)
                            .addComponent(lblPercentage, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblCR)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblEC)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnSaveComp)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(knownSpecies)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(analysedImages)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnUPrev)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnUNext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnPrev)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnNext)))))
                        .addGap(30, 30, 30))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnNext, btnPrev});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblCR)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(listSpecies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(analysedImages)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnUPrev)
                            .addComponent(btnUNext))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPercentage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSaveComp)
                            .addComponent(lblEC)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(knownSpecies)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnPrev)
                            .addComponent(btnNext))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(edgeDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // <editor-fold defaultstate="collapsed" desc="Save Button">
    // Button to allow saving of the superimposed edges
    private void btnSaveCompActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveCompActionPerformed
        JFileChooser fc = new JFileChooser();
        int returnVal = fc.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File wFile = fc.getSelectedFile();
            String path = wFile.getPath();
            if (!Utils.getExtension(wFile).equals("gif")) {
                path += ".gif";
            }
            int width = this.edgeDisplay.getWidth();
            int height = this.edgeDisplay.getHeight();
            BufferedImage bi = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
            Graphics2D g2 = bi.createGraphics();
            edgeDisplay.paint(g2);
            g2.dispose();
            if (!Edging.renderBufferedImage(bi, "gif", path)) {
                JOptionPane.showMessageDialog(this, "Could not save image");
            } else {
                JOptionPane.showMessageDialog(this, "Image " + path + " saved.");
            }
        }
        fc = null;
    }//GEN-LAST:event_btnSaveCompActionPerformed
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Display">
    // Display the known information
    public void initDisplay() {
        String initTaxon = (String) listSpecies.getSelectedItem();
        int index = listSpecies.getSelectedIndex();
        if (initTaxon == null) {
            initTaxon = taxaSorted[0];
            index = 0;
        }
        currentEdges = (Vector) taxa.get(initTaxon);
        if (currentEdges != null) {
            currentEdge = (double[][]) currentEdges.elementAt(0);
            Edging.superimposeCoordinates(unknowns[0], currentEdge);
            if (currentEdges.size() > 1) {
                btnNext.setEnabled(true);
            }
            if (unknowns.length > 1) {
                btnUNext.setEnabled(true);
            }
            Polygon t1 = Edging.toPolygon(unknowns[0], 1000.00);
            Polygon t2 = Edging.toPolygon(currentEdge, 1000.00);
            edgeDisplay.setBorder(75);
            edgeDisplay.setFirstEdge(t1);
            edgeDisplay.setSecondEdge(t2);
            edgeDisplay.repaint();
            cnt1 = 0;
            cnt2 = 0;
            knownSpecies.setText(initTaxon);
            this.lblPercentage.setText("Percentage: " + Double.toString(percentage[index]));
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Set Edges">
    // Set the superimposed images of the database and analysed image
    public void setEdges() {
        System.out.println("The indices are (unknown,known): " + cnt1 + "," + cnt2);
        currentEdge = (double[][]) currentEdges.elementAt(cnt2);
        Edging.superimposeCoordinates(unknowns[cnt1], currentEdge);
        Polygon t1 = Edging.toPolygon(unknowns[cnt1], 1000.00);
        Polygon t2 = Edging.toPolygon(currentEdge, 1000.00);
        edgeDisplay.setBorder(75);
        edgeDisplay.setFirstEdge(t1);
        edgeDisplay.setSecondEdge(t2);
        edgeDisplay.repaint();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Set Enabled">
    // Enable buttons for looking through the analysed image if there is
    // more than one and database edges if there is more than one
    private void setEnabled() {
        if (cnt1 > 0) {
            btnUPrev.setEnabled(true);
        }
        if (cnt1 < unknowns.length - 1 && unknowns.length > 1) {
            btnUNext.setEnabled(true);
        }
        if (cnt1 <= 0) {
            btnUPrev.setEnabled(false);
        }
        if (cnt1 >= unknowns.length - 1) {
            btnUNext.setEnabled(false);
        }
        if (cnt2 > 0) {
            btnPrev.setEnabled(true);
        }
        if (cnt2 < currentEdges.size() - 1 && currentEdges.size() > 1) {
            btnNext.setEnabled(true);
        }
        if (cnt2 <= 0) {
            btnPrev.setEnabled(false);
        }
        if (cnt2 >= currentEdges.size() - 1) {
            btnNext.setEnabled(false);
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="List Species">
    // Drop Down List of all the species in the databse
    private void listSpeciesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listSpeciesActionPerformed
        initDisplay();
        System.out.println("Setting the species to " + (String) listSpecies.getSelectedItem());
    }//GEN-LAST:event_listSpeciesActionPerformed
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Next Button">
    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        cnt2++; //known
        setEdges();
        setEnabled();
    }//GEN-LAST:event_btnNextActionPerformed
// </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Previous Button">
    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        cnt2--; //known
        setEdges();
        setEnabled();
    }//GEN-LAST:event_btnPrevActionPerformed
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Previous Button - Unknown">
    private void btnUPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUPrevActionPerformed
        cnt1--; //unknown
        setEdges();
        setEnabled();
    }//GEN-LAST:event_btnUPrevActionPerformed
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Next Button - Unknown">
    private void btnUNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUNextActionPerformed
        cnt1++; //unknown
        setEdges();
        setEnabled();
    }//GEN-LAST:event_btnUNextActionPerformed
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Generated Variables">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel analysedImages;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private javax.swing.JButton btnSaveComp;
    private javax.swing.JButton btnUNext;
    private javax.swing.JButton btnUPrev;
    public leafAnalysis.Drawer edgeDisplay;
    private javax.swing.JLabel knownSpecies;
    private javax.swing.JLabel lblCR;
    private javax.swing.JLabel lblEC;
    private javax.swing.JLabel lblPercentage;
    private javax.swing.JComboBox listSpecies;
    // End of variables declaration//GEN-END:variables
// </editor-fold>
}
