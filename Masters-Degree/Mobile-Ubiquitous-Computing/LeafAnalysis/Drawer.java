package leafAnalysis;

/*
 * This file is the Drawer.java and will be used by both CompareResults.java and
 * EdgeInfo.java to display the edge detection results. @author Daniel Elstob
 * @version 1.0 23-04-2015
 */
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.geom.Point2D;

public class Drawer extends javax.swing.JPanel {
    Polygon p1 = null;
    Polygon p2 = null;
    int border = 0;
    Color curColor = Color.YELLOW;
    
    // Creates new form Drawer
    public Drawer() {
        initComponents();
    }
    
    public Drawer(Polygon P) {
        p1 = P;
    }
        
    public void setColor(Color nc) {
        curColor = nc;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // <editor-fold defaultstate="collapsed" desc="Paint">
    protected void paintComponent(Graphics g) {
        // Let UI delegate paint first
        // (including background filling, if opaque)
        super.paintComponent(g);
        int h = this.getHeight();
        int w = this.getWidth();
        g.setColor(Color.black);
        g.fillRect(0, 0, w, h);
        g.setColor(curColor);
        Rectangle bounds = null;
        Point2D.Double cp = null;
        int hp = 0, wp = 0, px = 0, py = 0, xdif = 0, ydif = 0;
        double scale = 0.0;
        if (p1 != null) {
            bounds = p1.getBounds();
            cp = Edging.findCentroid(Edging.extractCoordinates(p1));
            hp = bounds.height;
            wp = bounds.width;
            px = bounds.x;
            py = bounds.y;
            if ((double) hp / (double) wp > (double) h / (double) w) {
                scale = (double) (h - 10 - 2 * border) / (double) hp;
            } else {
                scale = (double) (w - 10 - 2 * border) / (double) wp;
            }
            cp.x = (cp.x - (double) (px - 5)) * scale;
            cp.y = (cp.y - (double) (py - 5)) * scale;
            xdif = (int) (w / 2) - (int) cp.x;
            ydif = (int) (h / 2) - (int) cp.y;
            int[] xa = new int[p1.npoints];
            int[] ya = new int[p1.npoints];
            System.arraycopy(p1.xpoints, 0, xa, 0, p1.npoints);
            System.arraycopy(p1.ypoints, 0, ya, 0, p1.npoints);
            int npts = p1.npoints;

            for (int i = 0; i < npts; i++) {
                xa[i] = (int) ((double) (xa[i] - (px - 5)) * scale) + xdif;
                ya[i] = (int) ((double) (ya[i] - (py - 5)) * scale) + ydif;
            }
            g.drawPolygon(xa, ya, npts);
            g.setColor(Color.blue);
            g.fillRect(xa[0] - 2, ya[0] - 2, 5, 5);
            g.setColor(Color.green);
            g.fillRect(xa[0] - 1, ya[0] - 1, 3, 3);
            g.setColor(Color.red);
            g.drawLine(0, (int) cp.y + ydif, w, (int) cp.y + ydif);
            g.drawLine((int) cp.x + xdif, 0, (int) cp.x + xdif, h);
        }
        if (p2 != null && p1 != null) {
            //assumes p2 is already superimposed and scaled to match p1
            int[] xa = new int[p2.npoints];
            int[] ya = new int[p2.npoints];
            System.arraycopy(p2.xpoints, 0, xa, 0, p2.npoints);
            System.arraycopy(p2.ypoints, 0, ya, 0, p2.npoints);
            int npts = p2.npoints;
            for (int i = 0; i < npts; i++) {
                xa[i] = (int) ((double) (xa[i] - (px - 5)) * scale) + xdif;
                ya[i] = (int) ((double) (ya[i] - (py - 5)) * scale) + ydif;
            }
            g.setColor(Color.blue);
            g.fillRect(xa[0] - 2, ya[0] - 2, 5, 5);
            g.setColor(Color.green);
            g.fillRect(xa[0] - 1, ya[0] - 1, 3, 3);
            g.setColor(Color.cyan);
            g.drawPolygon(xa, ya, npts);
        }
    }
    //</editor-fold>

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    void setFirstEdge(Polygon t1) {
        p1 = t1;
    }
    
    void setSecondEdge(Polygon t2) {
        p2 = t2;
    }

    void setBorder(int border) {
        this.border = border;
    }
}
