package leafAnalysis;

/*
 * This file is the EdgeResults.java, the GUI that will show the edges
 * after analysing a leaf as well as the area and centroid. @author Daniel
 * Elstob @version 1.0 23-04-2015
 */
import java.awt.Polygon;

public class EdgeResults extends javax.swing.JInternalFrame {
    public int curCnt = 0;
    public Polygon[] p;
    boolean[] keep = null;
    double[] cSize;
    int[] pArea;
    MainScreen ms = null;

    // Creates new form EdgeResults
    public EdgeResults(MainScreen mS) {
        super("Edge Results",
                false, //resizable
                true, //closable
                false, //maximizable
                true);//iconifiable
        initComponents();
        EdgeInfo1.er = this;
        this.ms = mS;
    }
    
    // Adds the edges to the form
    public EdgeResults(Polygon[] p, MainScreen Ms) {
        super("Edge Results",
                false, //resizable
                true, //closable
                false, //maximizable
                true);//iconifiable
        setLocation(300, 0);
        initComponents();
        this.ms = Ms;
        EdgeInfo1.er = this;
        if (p != null) {
            pArea = new int[p.length];
            cSize = new double[p.length];
            keep = new boolean[p.length];
            for (int i = 0; i < p.length; i++) {
                keep[i] = true;
            }
            this.p = p;
            curCnt = 0;
            setEdgeInformation();
            setButtons();
            lblEdgeNumber.setText("Total edge: " + p.length);
        }
    }

    // Set the information
    public void setEdgeInformation() {
        EdgeInfo1.coordinates = Edging.extractCoordinates(p[curCnt]);
        EdgeInfo1.graphicEdge.p1 = p[curCnt];
        if (pArea[curCnt] <= 0) {
            pArea[curCnt] = Edging.findArea(p[curCnt]);
        }
        if (cSize[curCnt] <= 0) {
            cSize[curCnt] = Edging.findCentroidDistance(EdgeInfo1.coordinates);
        }
        EdgeInfo1.pArea = pArea[curCnt];
        EdgeInfo1.cSize = cSize[curCnt];

        EdgeInfo1.setEdgeInformation();
        EdgeInfo1.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblEdgeNumber = new javax.swing.JLabel();
        btnPrev = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        EdgeInfo1 = new leafAnalysis.EdgeInfo();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setTitle("Edges Results");

        lblEdgeNumber.setText("Total Edges:        ");

        btnPrev.setText("Previous");
        btnPrev.setEnabled(false);
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });

        btnNext.setText("Next");
        btnNext.setEnabled(false);
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(EdgeInfo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnNext)
                    .addComponent(btnPrev)
                    .addComponent(lblEdgeNumber))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnNext, btnPrev, lblEdgeNumber});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EdgeInfo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnPrev)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNext)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblEdgeNumber)))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // Set buttons active or not depending on number of edges found
    public void setButtons() {
        int len = 0;
        if (p != null) {
            len = p.length;
        }
        if (len == 0) {
            btnPrev.setEnabled(false);
            btnNext.setEnabled(false);
        } else if (curCnt == 0) {
            btnPrev.setEnabled(false);
            if (len > 1) {
                btnNext.setEnabled(true);
            }
        } else if (curCnt > 0 && curCnt < len - 1) {
            btnPrev.setEnabled(true);
            btnNext.setEnabled(true);
        } else if (curCnt == len - 1) {
            btnNext.setEnabled(false);
            if (len > 1) {
                btnPrev.setEnabled(true);
            }
        }
    }
    
    // Method for keeping and edge for further analyses or not
    public int keptEdge() {
        int out = 0;
        if (keep == null) {
            return 0;
        }
        for (int i = 0; i < keep.length; i++) {
            if (keep[i]) {
                out++;
            }
        }
        return out;
    }
    
    // Go to next edge
    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        curCnt++;
        EdgeInfo1.lblKeep.setSelected(keep[curCnt]);
        EdgeInfo1.lblKeep.setText("Keep edge " + (curCnt + 1));
        setEdgeInformation();
        setButtons();
    }//GEN-LAST:event_btnNextActionPerformed

    // Go to previous edge
    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        curCnt--;
        EdgeInfo1.lblKeep.setSelected(keep[curCnt]);
        EdgeInfo1.lblKeep.setText("Keep edge " + (curCnt + 1));
        setEdgeInformation();
        setButtons();
    }//GEN-LAST:event_btnPrevActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private leafAnalysis.EdgeInfo EdgeInfo1;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    public javax.swing.JLabel lblEdgeNumber;
    // End of variables declaration//GEN-END:variables

}
